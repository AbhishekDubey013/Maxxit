-- ============================================================================
-- Maxxit â€¢ Neon PostgreSQL Schema (numbered, Neon-safe)
-- ============================================================================

-- [1]
BEGIN;

-- [2]
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- [3]
CREATE EXTENSION IF NOT EXISTS pg_stat_statements;

-- [4]
DO $$ BEGIN
  CREATE TYPE venue_t AS ENUM ('SPOT','GMX','HYPERLIQUID');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

-- [5]
DO $$ BEGIN
  CREATE TYPE agent_status_t AS ENUM ('DRAFT','ACTIVE','PAUSED');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

-- [6]
DO $$ BEGIN
  CREATE TYPE bill_kind_t AS ENUM ('SUBSCRIPTION','INFRA_FEE','PROFIT_SHARE');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

-- [7]
DO $$ BEGIN
  CREATE TYPE bill_status_t AS ENUM ('CHARGED','FAILED');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

-- [8] helper for weights range check (0..100)
CREATE OR REPLACE FUNCTION weights_range_ok(arr smallint[])
RETURNS boolean
LANGUAGE sql
IMMUTABLE
PARALLEL SAFE
AS $$
  SELECT COALESCE(MIN(v) >= 0 AND MAX(v) <= 100, true)
  FROM unnest(arr) AS v;
$$;

-- [9]
CREATE TABLE IF NOT EXISTS ct_accounts(
  id               uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  x_username       text UNIQUE NOT NULL,
  display_name     text,
  followers_count  int,
  impact_factor    numeric DEFAULT 0,
  last_seen_at     timestamptz
);

-- [10]
CREATE TABLE IF NOT EXISTS ct_posts(
  id                  uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  ct_account_id       uuid NOT NULL REFERENCES ct_accounts(id),
  tweet_id            text NOT NULL UNIQUE,
  tweet_text          text NOT NULL,
  tweet_created_at    timestamptz NOT NULL,
  is_signal_candidate boolean NOT NULL DEFAULT false,
  extracted_tokens    text[] NOT NULL DEFAULT '{}'
);

-- [11]
CREATE INDEX IF NOT EXISTS ix_posts_acct_time
  ON ct_posts(ct_account_id, tweet_created_at DESC);

-- [12]
CREATE TABLE IF NOT EXISTS agents(
  id             uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  creator_wallet text NOT NULL,
  name           text NOT NULL,
  venue          venue_t NOT NULL,
  status         agent_status_t NOT NULL DEFAULT 'DRAFT',
  weights        smallint[] NOT NULL,
  CONSTRAINT chk_weights_len   CHECK (array_length(weights,1) = 8),
  CONSTRAINT chk_weights_range CHECK (weights_range_ok(weights)),
  apr_30d        numeric,
  apr_90d        numeric,
  apr_si         numeric,
  sharpe_30d     numeric
);

-- [13]
CREATE INDEX IF NOT EXISTS ix_agents_status_venue
  ON agents(status, venue);

-- [14]
CREATE TABLE IF NOT EXISTS agent_deployments(
  id              uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  agent_id        uuid NOT NULL REFERENCES agents(id),
  user_wallet     text NOT NULL,
  safe_wallet     text NOT NULL,
  status          agent_status_t NOT NULL DEFAULT 'ACTIVE',
  sub_active      boolean NOT NULL DEFAULT true,
  sub_started_at  timestamptz NOT NULL DEFAULT now(),
  trial_ends_at   timestamptz,
  next_billing_at timestamptz,
  UNIQUE (user_wallet, agent_id)
);

-- [15]
CREATE INDEX IF NOT EXISTS ix_deploy_agent
  ON agent_deployments(agent_id);

-- [16]
CREATE INDEX IF NOT EXISTS ix_deploy_user
  ON agent_deployments(user_wallet);

-- [17]
CREATE TABLE IF NOT EXISTS market_indicators_6h(
  id            uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  token_symbol  text NOT NULL,
  window_start  timestamptz NOT NULL,
  indicators    jsonb NOT NULL,
  UNIQUE (token_symbol, window_start)
);

-- [18] signals (no generated column)
CREATE TABLE IF NOT EXISTS signals(
  id             uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  agent_id       uuid NOT NULL REFERENCES agents(id),
  token_symbol   text NOT NULL,
  venue          venue_t NOT NULL,
  side           text NOT NULL,               -- BUY/SELL or LONG/SHORT
  size_model     jsonb NOT NULL,              -- {"type":"balance_pct","pct":5,"max_usd":500}
  risk_model     jsonb NOT NULL,              -- SL/TP/trailing params
  source_tweets  text[] NOT NULL,
  created_at     timestamptz NOT NULL,
  skipped_reason text
);

-- [19]
CREATE INDEX IF NOT EXISTS ix_signals_agent_time
  ON signals(agent_id, created_at DESC);

-- [20] immutable 6h bucket helper for unique index
CREATE OR REPLACE FUNCTION bucket_6h_utc(ts timestamptz)
RETURNS timestamptz
LANGUAGE sql
IMMUTABLE
PARALLEL SAFE
AS $$
  SELECT (
    date_trunc('hour', ts AT TIME ZONE 'UTC')
    - ((EXTRACT(hour FROM (ts AT TIME ZONE 'UTC'))::int % 6) * interval '1 hour')
  ) AT TIME ZONE 'UTC';
$$;

-- [20.1] unique functional index for dedupe
CREATE UNIQUE INDEX IF NOT EXISTS ux_signals_dedupe
  ON signals(agent_id, token_symbol, bucket_6h_utc(created_at));

-- [21]
CREATE TABLE IF NOT EXISTS positions(
  id              uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  deployment_id   uuid NOT NULL REFERENCES agent_deployments(id),
  signal_id       uuid NOT NULL REFERENCES signals(id),
  venue           venue_t NOT NULL,
  token_symbol    text NOT NULL,
  side            text NOT NULL,
  qty             numeric NOT NULL,
  entry_price     numeric NOT NULL,
  stop_loss       numeric,
  take_profit     numeric,
  trailing_params jsonb,
  opened_at       timestamptz NOT NULL,
  closed_at       timestamptz,
  exit_price      numeric,
  pnl             numeric,
  UNIQUE (deployment_id, signal_id)
);

-- [22]
CREATE INDEX IF NOT EXISTS ix_positions_deploy_time
  ON positions(deployment_id, opened_at DESC);

-- [23]
CREATE INDEX IF NOT EXISTS ix_positions_signal
  ON positions(signal_id);

-- [24]
CREATE TABLE IF NOT EXISTS billing_events(
  id            uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  position_id   uuid REFERENCES positions(id),
  deployment_id uuid NOT NULL REFERENCES agent_deployments(id),
  kind          bill_kind_t NOT NULL,
  amount        numeric NOT NULL,
  asset         text NOT NULL DEFAULT 'USDC',
  status        bill_status_t NOT NULL,
  occurred_at   timestamptz NOT NULL DEFAULT now(),
  metadata      jsonb
);

-- [25]
CREATE INDEX IF NOT EXISTS ix_billing_deploy_time
  ON billing_events(deployment_id, occurred_at DESC);

-- [26]
CREATE INDEX IF NOT EXISTS ix_billing_kind_time
  ON billing_events(kind, occurred_at DESC);

-- [27]
CREATE TABLE IF NOT EXISTS pnl_snapshots(
  id             uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  agent_id       uuid NOT NULL REFERENCES agents(id),
  deployment_id  uuid NOT NULL REFERENCES agent_deployments(id),
  day            date NOT NULL,
  pnl            numeric,
  return_pct     numeric,
  UNIQUE (deployment_id, day)
);

-- [28]
CREATE INDEX IF NOT EXISTS ix_pnl_agent_day
  ON pnl_snapshots(agent_id, day);

-- [29]
CREATE TABLE IF NOT EXISTS impact_factor_history(
  id                uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  ct_account_id     uuid NOT NULL REFERENCES ct_accounts(id),
  signal_id         uuid REFERENCES signals(id),
  position_id       uuid REFERENCES positions(id),
  pnl_contribution  numeric,
  weight            numeric,
  model_version     text,
  occurred_at       timestamptz NOT NULL DEFAULT now()
);

-- [30]
CREATE INDEX IF NOT EXISTS ix_ifh_ct_time
  ON impact_factor_history(ct_account_id, occurred_at DESC);

-- [31]
CREATE TABLE IF NOT EXISTS venues_status(
  id                 uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  venue              venue_t NOT NULL,
  token_symbol       text NOT NULL,
  min_size           numeric,
  tick_size          numeric,
  slippage_limit_bps int
);

-- [32]
CREATE INDEX IF NOT EXISTS ix_venue_token
  ON venues_status(venue, token_symbol);

-- [33]
CREATE TABLE IF NOT EXISTS token_registry(
  id               uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  chain            text NOT NULL,
  token_symbol     text NOT NULL,
  token_address    text NOT NULL,
  preferred_router text,
  UNIQUE (chain, token_symbol)
);

-- [34]
CREATE TABLE IF NOT EXISTS audit_logs(
  id           uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  event_name   text NOT NULL,
  subject_type text NOT NULL,
  subject_id   uuid,
  payload      jsonb,
  occurred_at  timestamptz NOT NULL DEFAULT now(),
  trace_id     text
);

-- [35]
CREATE INDEX IF NOT EXISTS ix_audit_event_time
  ON audit_logs(event_name, occurred_at DESC);

-- [36]
COMMIT;

-- ===================== End of Schema =====================