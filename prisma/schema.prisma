// Last updated: 2025-10-31 - Railway cache bust
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model agent_accounts {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agent_id      String      @db.Uuid
  ct_account_id String      @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  agents        agents      @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  ct_accounts   ct_accounts @relation(fields: [ct_account_id], references: [id], onDelete: Cascade)

  @@unique([agent_id, ct_account_id])
  @@index([agent_id])
  @@index([ct_account_id])
}

model agent_deployments {
  id                              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agent_id                        String            @db.Uuid
  user_wallet                     String
  safe_wallet                     String
  status                          agent_status_t    @default(ACTIVE)
  sub_active                      Boolean           @default(true)
  sub_started_at                  DateTime          @default(now()) @db.Timestamptz(6)
  trial_ends_at                   DateTime?         @db.Timestamptz(6)
  next_billing_at                 DateTime?         @db.Timestamptz(6)
  module_enabled                  Boolean           @default(false)
  module_address                  String?
  hyperliquid_agent_address       String?           // Unique agent wallet address for Hyperliquid
  hyperliquid_agent_key_encrypted String?           // Encrypted private key
  hyperliquid_agent_key_iv        String?           // Encryption IV
  hyperliquid_agent_key_tag       String?           // Encryption auth tag
  agents                          agents            @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  billing_events                  billing_events[]
  pnl_snapshots                   pnl_snapshots[]
  positions                       positions[]
  telegram_trades                 telegram_trades[]
  telegram_users                  telegram_users[]

  @@unique([user_wallet, agent_id])
  @@index([agent_id])
  @@index([user_wallet])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model agents {
  id                        String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  creator_wallet            String
  name                      String
  venue                     venue_t
  status                    agent_status_t          @default(DRAFT)
  weights                   Int[]                   @db.SmallInt
  apr_30d                   Float?                  @db.Real
  apr_90d                   Float?                  @db.Real
  apr_si                    Float?                  @db.Real
  sharpe_30d                Float?                  @db.Real
  profit_receiver_address   String
  proof_of_intent_message   String?
  proof_of_intent_signature String?
  proof_of_intent_timestamp DateTime?               @db.Timestamptz(6)
  agent_accounts            agent_accounts[]
  agent_deployments         agent_deployments[]
  impact_factor_history     impact_factor_history[]
  pnl_snapshots             pnl_snapshots[]
  signals                   signals[]

  @@index([status, venue])
}

model audit_logs {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_name   String
  subject_type String?
  subject_id   String?  @db.Uuid
  payload      Json?
  occurred_at  DateTime @default(now()) @db.Timestamptz(6)
  trace_id     String?

  @@index([event_name, occurred_at])
}

model billing_events {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  position_id       String?           @db.Uuid
  deployment_id     String            @db.Uuid
  kind              bill_kind_t
  amount            Decimal           @db.Decimal(20, 8)
  asset             String            @default("USDC")
  status            bill_status_t
  occurred_at       DateTime          @default(now()) @db.Timestamptz(6)
  metadata          Json?
  agent_deployments agent_deployments @relation(fields: [deployment_id], references: [id], onDelete: Cascade)
  positions         positions?        @relation(fields: [position_id], references: [id])

  @@index([deployment_id, occurred_at])
  @@index([kind, occurred_at])
}

model ct_accounts {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  x_username            String                  @unique
  display_name          String?
  followers_count       Int?
  impact_factor         Float                   @default(0) @db.Real
  last_seen_at          DateTime?               @db.Timestamptz(6)
  agent_accounts        agent_accounts[]
  ct_posts              ct_posts[]
  impact_factor_history impact_factor_history[]
}

model ct_posts {
  id                  String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ct_account_id       String      @db.Uuid
  tweet_id            String      @unique
  tweet_text          String
  tweet_created_at    DateTime    @db.Timestamptz(6)
  is_signal_candidate Boolean     @default(false)
  extracted_tokens    String[]    @default([])
  ct_accounts         ct_accounts @relation(fields: [ct_account_id], references: [id], onDelete: Cascade)

  @@index([ct_account_id])
}

model impact_factor_history {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ct_account_id    String      @db.Uuid
  signal_id        String?     @db.Uuid
  position_id      String?     @db.Uuid
  pnl_contribution Decimal?    @db.Decimal(20, 8)
  weight           Float?      @db.Real
  model_version    String?
  occurred_at      DateTime    @default(now()) @db.Timestamptz(6)
  agent_id         String?     @db.Uuid
  agents           agents?     @relation(fields: [agent_id], references: [id])
  ct_accounts      ct_accounts @relation(fields: [ct_account_id], references: [id], onDelete: Cascade)
  positions        positions?  @relation(fields: [position_id], references: [id])
  signals          signals?    @relation(fields: [signal_id], references: [id])

  @@index([ct_account_id, occurred_at])
}

model market_indicators_6h {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token_symbol String
  window_start DateTime @db.Timestamptz(6)
  indicators   Json

  @@unique([token_symbol, window_start])
  @@index([token_symbol])
}

model pnl_snapshots {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agent_id          String            @db.Uuid
  deployment_id     String            @db.Uuid
  day               DateTime          @db.Date
  pnl               Decimal?          @db.Decimal(20, 8)
  return_pct        Float?            @db.Real
  agents            agents            @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  agent_deployments agent_deployments @relation(fields: [deployment_id], references: [id], onDelete: Cascade)

  @@unique([deployment_id, day])
  @@index([agent_id, day])
}

model positions {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  deployment_id         String                  @db.Uuid
  signal_id             String                  @db.Uuid
  venue                 venue_t
  token_symbol          String
  side                  String
  qty                   Decimal                 @db.Decimal(20, 8)
  entry_price           Decimal                 @db.Decimal(20, 8)
  stop_loss             Decimal?                @db.Decimal(20, 8)
  take_profit           Decimal?                @db.Decimal(20, 8)
  trailing_params       Json?
  opened_at             DateTime                @default(now()) @db.Timestamptz(6)
  closed_at             DateTime?               @db.Timestamptz(6)
  exit_price            Decimal?                @db.Decimal(20, 8)
  pnl                   Decimal?                @db.Decimal(20, 8)
  entry_tx_hash         String?
  exit_tx_hash          String?
  manual_trade_id       String?                 @db.Uuid
  source                String                  @default("auto")
  billing_events        billing_events[]
  impact_factor_history impact_factor_history[]
  agent_deployments     agent_deployments       @relation(fields: [deployment_id], references: [id], onDelete: Cascade)
  telegram_trades       telegram_trades?        @relation(fields: [manual_trade_id], references: [id])
  signals               signals                 @relation(fields: [signal_id], references: [id], onDelete: Cascade)

  @@unique([deployment_id, signal_id])
  @@index([deployment_id, opened_at])
  @@index([signal_id])
  @@index([source])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model signals {
  id                           String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agent_id                     String                  @db.Uuid
  token_symbol                 String
  venue                        venue_t
  side                         String
  size_model                   Json
  risk_model                   Json
  source_tweets                String[]                @default([])
  created_at                   DateTime                @default(now()) @db.Timestamptz(6)
  skipped_reason               String?
  proof_verification_error     String?
  proof_verified               Boolean                 @default(false)
  executor_agreement_error     String?
  executor_agreement_message   String?
  executor_agreement_signature String?
  executor_agreement_timestamp DateTime?               @db.Timestamptz(6)
  executor_agreement_verified  Boolean                 @default(false)
  executor_wallet              String?
  impact_factor_history        impact_factor_history[]
  positions                    positions[]
  agents                       agents                  @relation(fields: [agent_id], references: [id], onDelete: Cascade)

  @@index([agent_id, created_at])
}

model telegram_trades {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  telegram_user_id  String            @db.Uuid
  deployment_id     String            @db.Uuid
  message_id        String
  command           String
  parsed_intent     Json
  confirmed         Boolean           @default(false)
  confirmed_at      DateTime?         @db.Timestamptz(6)
  executed          Boolean           @default(false)
  executed_at       DateTime?         @db.Timestamptz(6)
  signal_id         String?           @db.Uuid
  status            String            @default("pending")
  error_message     String?
  created_at        DateTime          @default(now()) @db.Timestamptz(6)
  positions         positions[]
  agent_deployments agent_deployments @relation(fields: [deployment_id], references: [id], onDelete: Cascade)
  telegram_users    telegram_users    @relation(fields: [telegram_user_id], references: [id], onDelete: Cascade)

  @@index([deployment_id])
  @@index([status])
  @@index([telegram_user_id])
}

model telegram_users {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  telegram_user_id  String            @unique
  telegram_username String?
  first_name        String?
  deployment_id     String            @db.Uuid
  link_code         String?           @unique
  linked_at         DateTime          @default(now()) @db.Timestamptz(6)
  last_active_at    DateTime          @default(now()) @db.Timestamptz(6)
  is_active         Boolean           @default(true)
  telegram_trades   telegram_trades[]
  agent_deployments agent_deployments @relation(fields: [deployment_id], references: [id], onDelete: Cascade)

  @@index([deployment_id])
}

model token_registry {
  id               String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chain            String
  token_symbol     String
  token_address    String
  preferred_router String?

  @@unique([chain, token_symbol])
}

model venues_status {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  venue              venue_t
  token_symbol       String
  min_size           Decimal? @db.Decimal(20, 8)
  tick_size          Decimal? @db.Decimal(20, 8)
  slippage_limit_bps Int?

  @@unique([venue, token_symbol])
  @@index([venue, token_symbol])
}

enum agent_status_t {
  DRAFT
  ACTIVE
  PAUSED
}

enum bill_kind_t {
  SUBSCRIPTION
  INFRA_FEE
  PROFIT_SHARE
}

enum bill_status_t {
  CHARGED
  FAILED
}

enum venue_t {
  SPOT
  GMX
  HYPERLIQUID
}
